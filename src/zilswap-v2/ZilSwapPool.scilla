scilla_version 0

import BoolUtils IntUtils ListUtils

library ZilSwapPool

type ReserveData =
| ReserveData of Uint256 Uint256 Uint256 Uint256 (* reserve0, reserve1, vReserve0, vReserve1 *)

let zero_address = 0x0000000000000000000000000000000000000000
let zero_amount = Uint128 0
let minimum_liquidity = Uint128 1000
let bps = Uint128 10000

(* returns True if all items in the list is True *)
let all_true =
  fun (list : List Bool) =>
    let identity = fun (a: Bool) => a in
    let list_forall_bool = @list_forall Bool in
    list_forall_bool identity list

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeNotFactory

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeIsSender              => Int32 -1
      | CodeInsufficientFunds     => Int32 -2
      | CodeInsufficientAllowance => Int32 -3
      | CodeNotFactory            => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }

(* Dummy user-defined ADT *)
type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero_amount
  end

contract ZilSwapPool
(
  init_token0 : ByStr20 with contract
    field total_supply : Uint128,
    field balances: Map ByStr20 Uint128,
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end,
  init_token1 : ByStr20 with contract
    field total_supply : Uint128,
    field balances: Map ByStr20 Uint128,
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end,
  init_factory : ByStr20 with contract
    field fee_configuration : Pair ByStr20 Uint128
  end,
  init_amp_bps : Uint128,
  (* zrc-2 required vars *)
  contract_owner: ByStr20,
  name : String,
  symbol : String,
  decimals : Uint32,
  init_supply : Uint128
)

with
  let not_identical_address = let eql = builtin eq init_token0 init_token1 in negb eql in
  let not_zero_address = let eql = builtin eq init_token0 zero_address in negb eql in
  let valid_bps = uint128_ge init_amp_bps bps in
  let valid_token_order = let a = builtin to_uint256 init_token0 in let b = builtin to_uint256 init_token1 in builtin lt a b in
  (* validate zrc-2 required vars *)
  let valid_owner = builtin eq init_factory contract_owner in
  let valid_init_supply = builtin eq init_supply zero_amount in
  let valid_decimals = let twelve = Uint32 12 in builtin eq decimals twelve in
  (* @dev: symbol and name is validated by initializer *)

  let l0 = Nil {Bool} in
  let l1 = Cons {Bool} not_identical_address l0 in
  let l2 = Cons {Bool} not_zero_address l1 in
  let l3 = Cons {Bool} valid_bps l2 in
  let l4 = Cons {Bool} valid_token_order l3 in
  let l5 = Cons {Bool} valid_owner l4 in
  let l6 = Cons {Bool} valid_init_supply l5 in
  let l7 = Cons {Bool} valid_decimals l6 in
  all_true l7
=>

(* @dev: to allow reading of these values by other contract, these vars are not immutable *)
field factory : ByStr20 with contract
  field fee_configuration : Pair ByStr20 Uint128 (* _feeTo, _governanceFeeBps *)
end = init_factory
field token0 : ByStr20 with contract
  field total_supply : Uint128,
  field balances: Map ByStr20 Uint128,
  field allowances: Map ByStr20 (Map ByStr20 Uint128)
end = init_token0
field token1 : ByStr20 with contract
  field total_supply : Uint128,
  field balances: Map ByStr20 Uint128,
  field allowances: Map ByStr20 (Map ByStr20 Uint128)
end = init_token1

field reserve0 : Uint128 = zero_amount
field reserve1 : Uint128 = zero_amount
field amp_bps : Uint128 = init_amp_bps

(* @dev: only used when amp factor > 1 *)
field v_reserve0 : Uint128 = zero_amount
field v_reserve1 : Uint128 = zero_amount

(* @dev: zrc-2 *)
field total_supply : Uint128 = zero_amount
field balances: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field allowances: Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)

(**************************************)
(*             Procedures             *)
(**************************************)

(* @dev: zrc-2 *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[from];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    (* Subtract amount from from and add it to to address *)
    new_from_bal = builtin sub bal amount;
    balances[from] := new_from_bal;
    (* Adds amount to to address *)
    get_to_bal <- balances[to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[to] := new_to_bal
  | False =>
    (* Balance not sufficient *)
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

(* @dev: pool *)
procedure IsFactory(address : ByStr20)
  f <- factory;
  is_factory = builtin eq f address;
  match is_factory with
  | True =>
  | False =>
    err = CodeNotFactory;
    ThrowError err
  end
end

(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero_amount
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  AuthorizedMoveIfSufficientBalance _sender to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero_amount;
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero_amount;
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance from to amount;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed;
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: zero_amount;
                        initiator: _sender; sender : from; recipient: to; amount: amount};
    msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero_amount;
                    initiator: _sender; sender: from; recipient: to; amount: amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end
