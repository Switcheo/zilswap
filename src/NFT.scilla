scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils
library NonfungibleToken

(* User-defined ADTs *)
type Dummy =
| Dummy

type Operation =
| Add
| Sub

(* Global variables *)
let zero = Uint256 0
let one = Uint256 1
let false = False
let true = True
let verdad = Dummy
let add_operation = Add
let sub_operation = Sub

(* Library functions *)
let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

let get_bal =
  fun (some_bal: Option Uint256) =>
    match some_bal with
    | Some bal => bal
    | None => zero
    end

(* Error exception *)
type Error =
  | CodeNotContractOwner
  | CodeIsSelf
  | CodeTokenExists
  | CodeNotApproved
  | CodeNotTokenOwner
  | CodeNotFound
  | CodeNotApprovedForAll
  | CodeNotOwnerOrOperator
  | CodeNotApprovedSpenderOrOperator
  | CodeTokenLocked
  | CodeTokenAlreadyUnlocked
  | CodeHashNotMatching
  | CodeNotMatchingMintingAddress
  | CodeNoMintingAddressFound
  | CodeExceedSupply

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner             => Int32 -1
      | CodeIsSelf                       => Int32 -2
      | CodeTokenExists                  => Int32 -3
      | CodeNotApproved                  => Int32 -4
      | CodeNotTokenOwner                => Int32 -5
      | CodeNotFound                     => Int32 -6
      | CodeNotApprovedForAll            => Int32 -7
      | CodeNotOwnerOrOperator           => Int32 -8
      | CodeNotApprovedSpenderOrOperator => Int32 -9
      | CodeTokenLocked                  => Int32 -10
      | CodeTokenAlreadyUnlocked         => Int32 -11
      | CodeHashNotMatching              => Int32 -12
      | CodeNotMatchingMintingAddress    => Int32 -13
      | CodeNoMintingAddressFound        => Int32 -14
      | CodeExceedSupply                 => Int32 -15
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract NonfungibleToken
(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  max_nft_supply: Uint256,
  provenance_hash: ByStr32
)

(* Mutable fields *)

(* Mapping between token_id to token_owner *)
field token_owners: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Flag to indicate if tokens are locked, disabling transfers *)
field is_token_locked: Bool = True

(* Mapping from owner to number of owned tokens *)
field owned_token_count: Map ByStr20 Uint256 = Emp ByStr20 Uint256

(* Mapping between token_id to approved address                              *)
(* @dev: There can only be one approved address per token at any given time. *)
field token_approvals: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping of token_owner to operator  *)
field operator_approvals: Map ByStr20 (Map ByStr20 Dummy)
                            = Emp ByStr20 (Map ByStr20 Dummy)

(* Mapping from token_id to token_uri *)
field token_uris: Map Uint256 String = Emp Uint256 String

(* Total supply of tokens *)
field total_supply: Uint256 = Uint256 0

(* Base URI that will be updated once upon reveal *)
field base_uri: String = "https://ipfs.io/ipfs/QmUKgFcQuHHkQVCVwaC41VARB9EvDnnK4Jm3PyAhsbxNBd/"

(* Address of the minting contract *)
field minting_address: Option ByStr20 = None {ByStr20}

(* Address of the private minting contract *)
field private_minting_address: Option ByStr20 = None {ByStr20}

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure IsSelf(address_a: ByStr20, address_b: ByStr20)
  is_self = builtin eq address_a address_b;
  match is_self with
  | False =>
  | True =>
    err = CodeIsSelf;
    ThrowError err
  end
end

procedure IsTokenLocked()
  token_locked <- is_token_locked;
  match token_locked with
  | False =>
  | True =>
    err = CodeTokenLocked;
    ThrowError err
  end
end

procedure IsTokenOwner(token_id: Uint256, address: ByStr20)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | Some addr => 
    is_token_owner = builtin eq addr address;
    match is_token_owner with
    | True =>
    | False =>
      err = CodeNotTokenOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

procedure IsApprovedForAll(token_owner: ByStr20, operator: ByStr20)
  is_operator_approved <- exists operator_approvals[token_owner][operator];
  match is_operator_approved with
  | True =>
  | False =>
    err = CodeNotApprovedForAll;
    ThrowError err
  end
end

procedure IsOwnerOrOperator(token_owner: ByStr20)
  is_owner = builtin eq _sender token_owner;
  is_approved_for_all <- exists operator_approvals[token_owner][_sender];
  is_authorised = orb is_owner is_approved_for_all;
  match is_authorised with
  | True =>
  | False =>
    err = CodeNotOwnerOrOperator;
    ThrowError err
  end
end

procedure IsApprovedSpenderOrOperator(token_id: Uint256, token_owner: ByStr20)
  some_token_approval <- token_approvals[token_id];
  is_approved = match some_token_approval with
    | None => False
    | Some approved_address => 
      builtin eq _sender approved_address
    end;
  is_operator <- exists operator_approvals[token_owner][_sender];
  is_authorised = orb is_approved is_operator;
  match is_authorised with
  | True =>
  | False =>
    err = CodeNotApprovedSpenderOrOperator;
    ThrowError err
  end
end

procedure IsMintingContractAddress(address: ByStr20)
  contract_address <- minting_address;
  private_contract_address <- private_minting_address;
  match contract_address with
  | None => 
    match private_contract_address with
    | None =>
      err = CodeNoMintingAddressFound;
      ThrowError err
    | Some private_minting_contract =>
      is_minting_private = builtin eq private_minting_contract address;
      match is_minting_private with
      | True =>
      | False =>
        err = CodeNotMatchingMintingAddress;
        ThrowError err
      end
    end
  | Some minting_contract =>
    is_minting_contract = builtin eq minting_contract address;
    match is_minting_contract with
    | True =>
    | False =>
      match private_contract_address with
      | None =>
        err = CodeNotMatchingMintingAddress;
        ThrowError err
      | Some private_minting_contract =>
        is_minting_private = builtin eq private_minting_contract address;
        match is_minting_private with
        | True =>
        | False =>
          err = CodeNotMatchingMintingAddress;
          ThrowError err
        end
      end
    end
  end
end

procedure IsNotExceedingSupply(size: Uint256)
  current_supply <- total_supply;
  new_count = builtin add current_supply size;
  is_not_exceeding = uint256_le new_count max_nft_supply;
  match is_not_exceeding with
    | True =>
    | False =>
      err = CodeExceedSupply;
      ThrowError err
  end
end

procedure IsTokenExists(token_id: Uint256)
  token_exist <- exists token_owners[token_id];
  match token_exist with
  | False =>
  | True =>
    err = CodeTokenExists;
    ThrowError err
  end
end

procedure IsMatchingProvenanceHash (new_uri: String)
  new_hash = builtin sha256hash new_uri;
  is_matching = builtin eq new_hash provenance_hash;
  match is_matching with
  | True =>
  | False =>
    err = CodeHashNotMatching;
    ThrowError err
  end
end

procedure UpdateTokenCount(operation: Operation, address: ByStr20)
  match operation with
  | Add =>
    some_to_count <- owned_token_count[address];
    new_to_count = 
      let current_count = get_bal some_to_count in
      builtin add current_count one;
    owned_token_count[address] := new_to_count;
    current_supply <- total_supply;
    new_supply = builtin add current_supply one;
    total_supply := new_supply
  | Sub =>
    some_from_count <- owned_token_count[address];
    new_from_count = 
      let current_count = get_bal some_from_count in
        let is_zero = builtin eq current_count zero in
          match is_zero with
          | True => zero
          | False => builtin sub current_count one
          end;
    owned_token_count[address] := new_from_count;
    current_supply <- total_supply;
    new_supply = builtin sub current_supply one;
    total_supply := new_supply
  end
end

procedure SetTokenData(token_id: Uint256, to: ByStr20, token_uri: String)
  (* Mint new non-fungible token *)
  token_owners[token_id] := to;
  (* Add token_uri for token_id *)
  token_uris[token_id] := token_uri
end

procedure AddAndSetTokenHelper(to: ByStr20)
  (* Add to total_supply *)
  current_supply <- total_supply;
  token_id = builtin add current_supply one;
  token_id_string = builtin to_string token_id;
  (* Generate token_uri *)
  uri_url <- base_uri;
  token_uri = builtin concat uri_url token_id_string;
  (* Add and set token data *)
  IsTokenExists token_id;
  UpdateTokenCount add_operation to;
  SetTokenData token_id to token_uri
end

procedure UpdateTokenURI(token_id: Uint256)
  token_exist <- exists token_uris[token_id];
  match token_exist with
  | False =>
  | True =>
    new_uri <- base_uri;
    token_id_string = builtin to_string token_id;
    new_token_uri = builtin concat new_uri token_id_string;
    token_uris[token_id] := new_token_uri
  end
end

(* Getter transitions *)

(* @dev: Get number of NFTs assigned to a token_owner *)
transition BalanceOf(address: ByStr20)
  some_bal <- owned_token_count[address];
  balance = get_bal some_bal;
  msg_to_sender = { _tag : "BalanceOfCallBack"; _recipient : _sender; _amount : Uint128 0;
                   balance : balance};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get total supply of NFTs minted *)
transition TotalSupply()
  current_supply <- total_supply;
  msg_to_sender = { _tag : "TotalSupplyCallBack"; _recipient : _sender; _amount : Uint128 0;
                   total_supply : current_supply};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get name of the NFTs *)
transition Name()
  msg_to_sender = { _tag : "NameCallBack"; _recipient : _sender; _amount : Uint128 0;
                   name : name};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get name of the NFTs *)
transition Symbol()
  msg_to_sender = { _tag : "SymbolCallBack"; _recipient : _sender; _amount : Uint128 0;
                   symbol : symbol};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get approved_addr for token_id *)
transition GetApproved(token_id: Uint256)
  some_token_approval <- token_approvals[token_id];
  match some_token_approval with
  | Some addr => 
    msg_to_sender = { _tag : "GetApprovedCallBack"; _recipient : _sender; _amount : Uint128 0; 
                      approved_addr : addr; token_id : token_id};
    msgs = one_msg msg_to_sender;
    send msgs
  | None => 
    err = CodeNotApproved;
    ThrowError err
  end
end

(* @dev: Get the token_uri of a certain token_id *)
transition GetTokenURI(token_id: Uint256)
  some_token_uri <- token_uris[token_id];
  match some_token_uri with
  | Some token_uri =>
    msg_to_sender = { _tag : "GetTokenURICallBack"; _recipient : _sender; _amount : Uint128 0; 
                      token_uri : token_uri};
    msgs = one_msg msg_to_sender;
    send msgs
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

(* @dev: Check if a token_id is owned by a token_owner *)
transition CheckTokenOwner(token_id: Uint256, address: ByStr20)
  IsTokenOwner token_id address;
  msg_to_sender = { _tag : "IsOwnerCallBack"; _recipient : _sender; _amount : Uint128 0};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Check if address is operator for token_owner *)
transition CheckApprovedForAll(token_owner: ByStr20, operator: ByStr20)
  IsApprovedForAll token_owner operator;
  msg_to_sender = { _tag : "IsApprovedForAllCallBack"; _recipient : _sender; _amount : Uint128 0};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Contract owner specific transitions *)

(* @dev: Sets the address of the minting contract to ensure contraints on AddAndSetToken/s           *)
(* @param: address       - ByStr20 value to be stored as an Option in minting_address                *)
transition SetMintingAddress(address: ByStr20)
  IsContractOwner;
  option_address = Some {ByStr20} address;
  minting_address := option_address
end

(* @dev: Sets the address of the private minting contract to ensure contraints on AddAndSetToken/s           *)
(* @param: address       - ByStr20 value to be stored as an Option in minting_address                *)
transition SetPrivateMintingAddress(address: ByStr20)
  IsContractOwner;
  option_address = Some {ByStr20} address;
  private_minting_address := option_address
end

(* @dev: Unlocks tokens boolean flag or throws an error if already unlocked        *)
transition UnlockTokens()
  IsContractOwner;
  token_locked <- is_token_locked;
  match token_locked with
  | False =>
    err = CodeTokenAlreadyUnlocked;
    ThrowError err
  | True =>
    is_token_locked := false;
    msg_to_sender = { _tag : "UnlockTokensSuccessCallBack"; _recipient : _sender; _amount : Uint128 0};
    msgs = one_msg msg_to_sender;
    send msgs
  end
end

(* @dev: Updates the base_uri for reveal. Hash of new_uri must match provenance                      *)
(* @param: new_uri       - Updated base_uri                                                          *)
transition UpdateBaseURI(new_uri: String)
  IsContractOwner;
  IsMatchingProvenanceHash new_uri;
  base_uri := new_uri
end

(* Minting contract specific transitions *)

(* @dev:    Adds and sets token in relevant fields, called by Mint                 *)
(* @param:  to - Address of owner of token minted                                  *)
(* @param:  token_uri - URI of token, without unique id appended                   *)
transition AddAndSetToken(to: ByStr20)
  (* Ensure called by minting contract *)
  IsMintingContractAddress _sender;
  (* Ensure new token count does not exceed supply *)
  IsNotExceedingSupply one;
  AddAndSetTokenHelper to
end

(* @dev:    Adds and sets multiple tokens in relevant fields, called by BatchMint  *)
(* @param:  input_list - List of tokens to be added                                *)
transition AddAndSetTokens(input_list: List (ByStr20), size: Uint256)
  (* Ensure called by minting contract *)
  IsMintingContractAddress _sender;
  (* Ensure new token count does not exceed supply *)
  IsNotExceedingSupply size;
  forall input_list AddAndSetTokenHelper
end

(* Interface transitions *)

(* @dev:    Burn existing tokens. Only token_owner or an operator can burn a NFT. *)
(* @param:  token_id - Unique ID of the NFT to be destroyed                       *)
transition Burn(token_id: Uint256)
  (* Check if token exists *)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsOwnerOrOperator token_owner;
    (* Destroy existing token *)
    delete token_owners[token_id];
    delete token_approvals[token_id];
    delete token_uris[token_id];
    (* Deduct from owned_token_count *)
    UpdateTokenCount sub_operation token_owner;
    e = {_eventname: "BurnSuccess"; initiator: _sender; burn_address: token_owner; token: token_id};
    event e;
    msg_to_sender = { _tag : "BurnCallBack"; _recipient : _sender; _amount : Uint128 0;
                      initiator : _sender; burn_address : token_owner; token_id : token_id };
    msgs = one_msg msg_to_sender;
    send msgs
  end
end

(* @dev: Updates single or multiple token URIs in the URI map                                        *)
(* @param: token_ids - List of token IDs to be updated                                               *)
transition UpdateTokenURIs(token_ids: List (Uint256))
  forall token_ids UpdateTokenURI
end

(* @dev: Approves OR remove an address ability to transfer a given token_id *)
(* There can only be one approved_spender per token at any given time       *)
(* param: to       - Address to be approved for the given token_id          *)
(* param: token_id - Unique ID of the NFT to be approved                    *)
transition SetApprove(to: ByStr20, token_id: Uint256)
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsOwnerOrOperator token_owner;
    is_approved <- exists token_approvals[token_id];
    match is_approved with
    | True =>
      (* Remove approved_spender *)
      delete token_approvals[token_id];
      e = {_eventname: "RemoveApprovalSuccess"; initiator: _sender; removed_spender: to; token_id: token_id};
      event e;
      msg_to_sender = { _tag : "RemoveApprovalSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                        removed_spender : to; token_id : token_id };
      msgs = one_msg msg_to_sender;
      send msgs
    | False =>
      (* Add approved_spender *)
      token_approvals[token_id] := to;
      e = {_eventname: "AddApprovalSuccess"; initiator: _sender; approved_addr: to; token: token_id};
      event e;
      msg_to_sender = { _tag : "AddApprovalSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                        approved_spender : to; token_id : token_id };
      msgs = one_msg msg_to_sender;
      send msgs
    end
  end
end

(* @dev: Sets or unsets an operator for the _sender                *)
(* @param: to       - Address to be set or unset as an operator    *)
transition SetApprovalForAll(to: ByStr20)
  IsSelf to _sender;
  is_operator <- exists operator_approvals[_sender][to];
  match is_operator with
  | False =>
    (* Add operator *)
    operator_approvals[_sender][to] := verdad;
    e = {_eventname: "AddApprovalForAllSuccess"; initiator: _sender; operator: to};
    event e
  | True =>
    (* Remove operator *)
    delete operator_approvals[_sender][to];
    e = {_eventname: "RemoveApprovalForAllSuccess"; initiator: _sender; operator: to};
    event e
  end;
  new_status = negb is_operator;
  msg_to_sender = { _tag : "SetApprovalForAllSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                    operator : to; status : new_status};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Transfer the ownership of a given token_id to another address. token_owner only transition. *)
(* @param: to       - Recipient address for the token                                                *)
(* @param: token_id - Unique ID of the NFT to be transferred                                         *)
transition Transfer(to: ByStr20, token_id: Uint256)
  IsSelf to _sender;
  IsTokenOwner token_id _sender;
  IsTokenLocked;
  (* Change token_owner for that token_id *)
  token_owners[token_id] := to;
  (* Delete tokenApproval entry for that token_id *)
  delete token_approvals[token_id];
  (* Subtract one from previous token owner count *)
  UpdateTokenCount sub_operation _sender;
  (* Add one to the new token owner count *)
  UpdateTokenCount add_operation to;
  e = {_eventname: "TransferSuccess"; from: _sender; recipient: to; token: token_id};
  event e;
  msg_to_recipient = { _tag : "RecipientAcceptTransfer"; _recipient : to; _amount : Uint128 0; 
                      from : _sender; recipient : to; token_id : token_id };
  msg_to_sender = { _tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                    from : _sender; recipient : to; token_id : token_id };
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Transfer the ownership of a given token_id to another address. approved_spender or operator only transition. *)
(* @param: to       - Recipient address for the NFT                                                                   *)
(* @param: token_id - Unique ID of the NFT to be transferred                                                          *)
transition TransferFrom(to: ByStr20, token_id: Uint256)
  IsTokenLocked;
  some_token_owner <- token_owners[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsSelf to token_owner;
    IsApprovedSpenderOrOperator token_id token_owner;
    (* Change token_owner for that token_id *)
    token_owners[token_id] := to;
    (* Delete tokenApproval entry for that token_id *)
    delete token_approvals[token_id];
    (* Subtract one from previous token owner count *)
    UpdateTokenCount sub_operation token_owner;
    (* Add one to the new token owner count *)
    UpdateTokenCount add_operation to;
    e = {_eventname: "TransferFromSuccess"; from: token_owner; recipient: to; token: token_id};
    event e;
    msg_to_recipient = { _tag : "RecipientAcceptTransferFrom"; _recipient : to; _amount : Uint128 0; 
                        from : token_owner; recipient : to; token_id : token_id };
    msg_to_sender = { _tag : "TransferFromSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                      from : token_owner; recipient : to; token_id : token_id };
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  end
end
