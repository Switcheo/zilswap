scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)

library ZGrandEmporium

let true = True
let false = False
let zero = Uint128 0
let one = Uint128 1
let none = None {ByStr20}

(* Error events *)
type Error =
  | CodeNotOwner
  | CodeNotPendingOwner
  | CodePendingOwnerNotEmpty
  | CodeNotEnabled
  | CodeNotDisabled
  | CodeNotStall
  | CodeItemNotFound

type Item =
  | Item of String ByStr20 (* name, stall contract *)

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotOwner              => Int32 -1
      | CodeNotPendingOwner       => Int32 -2
      | CodePendingOwnerNotEmpty  => Int32 -3
      | CodeNotEnabled            => Int32 -4
      | CodeNotDisabled           => Int32 -5
      | CodeNotStall              => Int32 -6
      | CodeItemNotFound          => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ZGrandEmporium(
  initial_owner: ByStr20
)

field contract_owner : Option ByStr20 = Some {ByStr20} initial_owner
field pending_owner : Option ByStr20 = none
field enabled : Bool = True

field stalls : Map ByStr20 Bool = Emp ByStr20 Bool
field items : Map Uint128 Item = Emp Uint128 Item
field next_item_id : Uint128 = zero (* globally unique item id for all stalls *)

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(address: ByStr20)
  maybe_current_owner <- contract_owner;
  match maybe_current_owner with
  | Some current_owner =>
    is_owner = builtin eq current_owner address;
    match is_owner with
    | True =>
    | False =>
      err = CodeNotOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure IsPendingOwner(address: ByStr20)
  maybe_pending_owner <- pending_owner;
  match maybe_pending_owner with
  | Some current_pending_owner =>
    is_pending_owner = builtin eq current_pending_owner address;
    match is_pending_owner with
    | True =>
    | False =>
      err = CodeNotPendingOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotPendingOwner;
    ThrowError err
  end
end

procedure IsStall(address: ByStr20)
  is_stall <- exists stalls[address];
  match is_stall with
  | True =>
  | False =>
    err = CodeNotStall;
    ThrowError err
  end
end

procedure IsEnabled()
  e <- enabled;
  match e with
  | True =>
  | False =>
    err = CodeNotEnabled;
    ThrowError err
  end
end

(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev: Purchases an item. *)
(* @param item_id: the globally unique id of the item to purchase *)
(* @param purchase_data: extra purchase data for events *)
transition PurchaseItem(item_id: Uint128, max_price: Uint256, purchase_data: String) (* extra purchase data for events *)
  accept;
  maybe_item <- items[item_id];
  match maybe_item with
  | None =>
    err = CodeItemNotFound;
    ThrowError err
  | Some item =>
    match item with
    | Item name stall =>
      msg_to_stall = {
        _tag: "PurchaseItem";
        _recipient: stall;
        _amount: _amount; (* forward all ZILs *)
        item_id: item_id;
        purchase_data: purchase_data;
        max_price: max_price;
        purchaser: _sender
      };
      msgs = one_msg msg_to_stall;
      send msgs
    end
  end
end

(***************************************************)
(*              Ownership Transitions              *)
(***************************************************)

(* @dev: Transfers contract ownership to a new address. The new address must call the AcceptOwnership transition to finalize the transfer. *)
(* @param new_owner: Address of the new contract_owner.                                                                                    *)
transition TransferOwnership(new_owner: ByStr20)
  IsOwner _sender;
  o = Some {ByStr20} new_owner;
  pending_owner := o;
  e = {_eventname : "OwnershipTransferInitiated"; contract_owner : _sender; pending_owner : new_owner};
  event e
end

(* @dev: Finalizes transfer of contract ownership. Must be called by the new contract_owner. *)
transition AcceptOwnership()
  IsPendingOwner _sender;
  previous_contract_owner <- contract_owner;
  o = Some {ByStr20} _sender;
  contract_owner := o;
  pending_owner := none;
  e = {_eventname : "OwnershipTransferAccepted"; previous_contract_owner : previous_contract_owner; contract_owner : _sender};
  event e
end

(* @dev: Enables all functionalities. Only can be called by the contract_owner. *)
transition Enable()
  IsOwner _sender;
  enabled := true;
  e = {_eventname : "Enabled"};
  event e
end

(* @dev: Disables all functionalities except emergency withdraw. Only can be called by the contract_owner. *)
transition Disable()
  IsOwner _sender;
  enabled := false;
  e = {_eventname : "Disabled"};
  event e
end

(* @dev: Adds a stall to the marketplace. *)
transition AddStall(address: ByStr20)
  IsOwner _sender;
  stalls[address] := true;
  e = {_eventname : "StoreAdded"; store: address};
  event e
end

(* @dev: Remove a stall from the marketplace. *)
transition RemoveStall(address: ByStr20)
  IsOwner _sender;
  maybe_stalls <- stalls[address];
  match maybe_stalls with
  | None => (* no-op *)
  | Some stall =>
    delete stalls[address];
    e = {_eventname : "StoreRemoved"; store: address};
    event e
  end
end

(* @dev: Lists an item on the marketplace, callbacks with the globally unique item id for the given item. *)
transition ListItem(item_name: String)
  IsStall _sender;

  item = Item item_name _sender;
  item_id <- next_item_id;
  items[item_id] := item;

  n = builtin add item_id one;
  next_item_id := n;

  e = {_eventname : "ItemListed"; item_id: item_id; item: item};
  event e;

  msg_to_stall = {
    _tag: "ListItemSuccess";
    _recipient: _sender;
    _amount: _amount;
    item_id: item_id;
    item_name: item_name
  };
  msgs = one_msg msg_to_stall;
  send msgs
end

(* @dev: Delists an item from the marketplace. *)
transition DelistItem(item_id: Uint128)
  IsStall _sender;
  maybe_item <- items[item_id];
  match maybe_item with
  | None =>
    err = CodeItemNotFound;
    ThrowError err
  | Some item =>
    delete items[item_id];
    e = {_eventname : "ItemDelisted"; item_id: item_id; item:item};
    event e
  end
end

(* @dev Allows a stall to use the emporium as a router to transfer zrc-2 tokens it. *)
transition TransferToken(token: ByStr20, from: ByStr20, amount: Uint128)
  IsStall _sender;
  msg_to_token = {
    _tag: "TransferFrom";
    _recipient: token;
    _amount: zero;
    from: from;
    to: _sender;
    amount: amount
  };
  msgs = one_msg msg_to_token;
  send msgs
end

(***************************************)
(*             Callbacks               *)
(***************************************)

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
  (* no-op - allow sending tokens to stall *)
end
