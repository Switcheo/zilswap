scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils ListUtils
library CommunityMinter

(* Global variables *)
let max_mint_quantity = Uint32 10
let zero = Uint128 0
let none = None {ByStr20}
let false = False
let true = True
let empty = ""

(* Library functions *)
let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let grow : Uint32 -> Uint128 =
  fun (var : Uint32) =>
    let maybe_big = builtin to_uint128 var in
    match maybe_big with
    | Some big => big
    | None => Uint128 0 (* should never happen *)
    end

let build_mint_msgs : ByStr20 -> ByStr20 -> Uint32 -> List (Message) =
  fun (nft_address : ByStr20) => fun (to: ByStr20) => fun (m: Uint32) =>
    let z = Uint32 0 in
    let zero_lt_m = builtin lt z m in
    match zero_lt_m with
    | True =>
        (* m is the nat to recurse on *)
        let m_nat = builtin to_nat m in
        let nil = Nil {Message} in
        let list_init = nil in
        let msg = { _tag: "Mint"; _recipient: nft_address; _amount: zero; to: to; token_uri: empty } in
        let step = fun (list :  List (Message)) => fun (ignore : Nat) =>
          let new_list = Cons {Message} msg list in
          new_list
        in
        let fold = @nat_fold (List (Message)) in
        let xs_m = fold step list_init m_nat in
        xs_m
    | False => Nil {Message}
    end

(* Error exception *)
type Error =
  | CodeNotOwner
  | CodeNotPendingOwner
  | CodePendingOwnerNotEmpty
  | CodeSaleNotActive
  | CodeSaleNotInactive
  | CodeExceedMaxMintQuantity
  | CodeIncorrectAmount
  | CodeInsufficientWithdrawBalance

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotOwner                    => Int32 -1
      | CodeNotPendingOwner             => Int32 -2
      | CodePendingOwnerNotEmpty        => Int32 -3
      | CodeSaleNotActive               => Int32 -4
      | CodeSaleNotInactive             => Int32 -5
      | CodeExceedMaxMintQuantity       => Int32 -6
      | CodeIncorrectAmount             => Int32 -7
      | CodeInsufficientWithdrawBalance => Int32 -8
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract CommunityMinter
(
  contract_owner: ByStr20,
  nft_address: ByStr20,
  nft_price: Uint128
)

(* Mutable fields *)

field current_owner : Option ByStr20 = Some {ByStr20} contract_owner
field pending_owner : Option ByStr20 = none

(* Flag to indicate if sale is active. Tokens will be mintable during a sale only *)
field sale_active: Bool = False

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(address: ByStr20)
  maybe_current_owner <- current_owner;
  match maybe_current_owner with
  | Some current_contract_owner =>
    is_owner = builtin eq current_contract_owner address;
    match is_owner with
    | True =>
    | False =>
      err = CodeNotOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure IsPendingOwner(address: ByStr20)
  maybe_pending_owner <- pending_owner;
  match maybe_pending_owner with
  | Some current_pending_owner =>
    is_pending_owner = builtin eq current_pending_owner address;
    match is_pending_owner with
    | True =>
    | False =>
      err = CodeNotPendingOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotPendingOwner;
    ThrowError err
  end
end

procedure NoPendingOwner()
  maybe_pending_owner <- pending_owner;
  match maybe_pending_owner with
  | Some p =>
    err = CodePendingOwnerNotEmpty;
    ThrowError err
  | None =>
  end
end

procedure IsSaleActive()
  is_sale_active <- sale_active;
  match is_sale_active with
  | True =>
  | False =>
    err = CodeSaleNotActive;
    ThrowError err
  end
end

procedure IsSaleInactive()
  is_sale_active <- sale_active;
  match is_sale_active with
  | False =>
  | True =>
    err = CodeSaleNotInactive;
    ThrowError err
  end
end

procedure IsWithinMintLimit(quantity: Uint32)
  is_not_exceeding = uint32_le quantity max_mint_quantity;
  match is_not_exceeding with
  | True =>
  | False =>
    err = CodeExceedMaxMintQuantity;
    ThrowError err
  end
end

procedure CheckAndReceiveProceeds(quantity: Uint32)
  accept;
  qty = grow quantity;
  expected_amount = builtin mul nft_price qty;
  is_equal = uint128_eq expected_amount _amount;
  match is_equal with
  | True =>
  | False =>
    err = CodeIncorrectAmount;
    ThrowError err
  end
end

(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev:    Mint new tokens to the sender.      *)
(* @param:  quantity - Number of tokens to mint *)
transition MintForCommunity(quantity: Uint32)
  IsSaleActive;
  IsWithinMintLimit quantity;
  CheckAndReceiveProceeds quantity;

  msgs = build_mint_msgs nft_address _sender quantity;
  send msgs
end

(* @dev: Enables the sale. *)
transition EnableSale()
  IsOwner _sender;
  IsSaleInactive;

  sale_active := true;
  e = {_eventname: "SaleEnabled"};
  event e
end

(* @dev: Disables the sale. *)
transition DisableSale()
  IsOwner _sender;
  IsSaleActive;

  sale_active := false;
  e = {_eventname: "SaleDisabled"};
  event e
end

(** Ownership lifecycle transitions *)

(* @dev: Transfers contract ownership to a new address. The new address must call the AcceptOwnership transition to finalize the transfer. *)
(* @param new_owner: Address of the new current_owner.                                                                                    *)
transition TransferOwnership(new_owner: ByStr20)
  IsOwner _sender;
  o = Some {ByStr20} new_owner;
  pending_owner := o;
  e = {_eventname : "OwnershipTransferInitiated"; current_owner : _sender; pending_owner : new_owner};
  event e
end

(* @dev: Finalizes transfer of contract ownership. Must be called by the new current_owner. *)
transition AcceptOwnership()
  IsPendingOwner _sender;
  previous_current_owner <- current_owner;
  o = Some {ByStr20} _sender;
  current_owner := o;
  pending_owner := none;
  e = {_eventname : "OwnershipTransferAccepted"; previous_current_owner : previous_current_owner; current_owner : _sender};
  event e
end

(* @dev: Removes the current_owner, meaning that new minters can no longer be added. Must not have a pending owner. *)
transition RevokeOwnership()
  IsOwner _sender;
  NoPendingOwner;
  current_owner := none;
  e = {_eventname : "OwnershipRevoked"; current_owner : _sender};
  event e
end

(* @dev: Withdraws ZIL from the contract to the owner.              *)
(* Can be used to collect funds or to rescue                        *)
(* funds that is wrongly sent to contract.                          *)
(* @param amount: The amount of ZIL (in Qa units) to withdraw.      *)
transition Withdraw(amount : Uint128)
  IsOwner _sender;
  bal <- _balance;
  is_sufficient_balance = uint128_le amount bal;
  match is_sufficient_balance with
  | True =>
    msg_to_sender  = {_tag : "AddFunds"; _recipient : _sender; _amount : amount};
    msgs = one_msg msg_to_sender;
    send msgs
  | False =>
    err = CodeInsufficientWithdrawBalance;
    ThrowError err
  end
end

(*************************************)
(*             Callbacks             *)
(*************************************)

transition MintCallBack(recipient: ByStr20, token_id: Uint256, token_uri: String)
  (* proxy callback to the recipient, who is always the minter *)
  msg_to_sender = {
    _tag : "MintCallBack"; _recipient : recipient; _amount : zero;
    recipient : recipient; token_id : token_id; token_uri : token_uri
  };
  msgs = one_msg msg_to_sender;
  send msgs
end
